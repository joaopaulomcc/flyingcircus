"""
====================================================================================================
Nonlinear Aeroelasticity and Flight Dynamics of High-Altitude Long-Endurance Aircraft

Mayuresh J. Patil, Dewey. H. Hodges, Carlos E. S. Cesnik

====================================================================================================

Comparisson of the results obtained by in the paper above with those generated by the tool developed
in this work

Author: Jo√£o Paulo Monteiro Cruvinel da Costa
"""

# ==================================================================================================
# IMPORTS

import numpy as np
from pyquaternion import Quaternion

# Import code sub packages
from context import src
from src import geometry as geo
from src import structures as struct

# ==================================================================================================
# GEOMETRY DEFINITION

# Wing section

# Aifoil name, only informative
airfoil = "airfoil"

# Material properties, all equal to one as Smith et al only provies the stiffness characteristics
# of the wing
MATERIAL = struct.objects.Material(
    name="material",
    density=0.75,
    elasticity_modulus=1,
    rigidity_modulus=1,
    poisson_ratio=1,
    yield_tensile_stress=1,
    ultimate_tensile_stress=1,
    yield_shear_stress=1,
    ultimate_shear_stress=1,
)

# Wing section properties
SECTION = geo.objects.Section(
    identifier=airfoil,
    material=MATERIAL,
    area=1e6,
    Iyy=2e4,
    Izz=4e6,
    J=1e4,
    shear_center=0.5,
)

# --------------------------------------------------------------------------------------------------
# WING AND TAIL DEFINITION

# Wing surface data
WING_ROOT_CHORD = 1
WING_TIP_CHORD = 1
SEMI_WING_LENGTH = 14.03
WING_SWEEP_ANGLE = 0
WING_DIHEDRAL_ANGLE = 0
WING_TIP_TORSION_ANGLE = 0
WING_INCIDENCE = 0

# Aileron Surface data
AILERON_ROOT_CHORD = WING_ROOT_CHORD
AILERON_TIP_CHORD = WING_TIP_CHORD
AILERON_LENGTH = 1.97
AILERON_SWEEP_ANGLE = WING_SWEEP_ANGLE
AILERON_DIHEDRAL_ANGLE = WING_DIHEDRAL_ANGLE
AILERON_TIP_TORSION_ANGLE = WING_TIP_TORSION_ANGLE
AILERON_CONTROL_SURFACE_HINGE_POSITION = (1 - 0.22)

# Elevator Surface Data
ELEVATOR_ROOT_CHORD = 0.5
ELEVATOR_TIP_CHORD = 0.5
SEMI_ELEVATOR_LENGTH = 2.5
ELEVATOR_SWEEP_ANGLE = 0
ELEVATOR_DIHEDRAL_ANGLE = 0
ELEVATOR_TIP_TORSION_ANGLE = 0
ELEVATOR_CONTROL_SURFACE_HINGE_POSITION = 0.5

# Creation of the surface objects of the wing macrosurface
left_wing_surface = geo.objects.Surface(
    identifier="left_wing",
    root_chord=WING_ROOT_CHORD,
    root_section=SECTION,
    tip_chord=WING_TIP_CHORD,
    tip_section=SECTION,
    length=SEMI_WING_LENGTH,
    leading_edge_sweep_angle_deg=WING_SWEEP_ANGLE,
    dihedral_angle_deg=WING_DIHEDRAL_ANGLE,
    tip_torsion_angle_deg=WING_TIP_TORSION_ANGLE,
    control_surface_hinge_position=None,
)

right_wing_surface = geo.objects.Surface(
    identifier="right_wing",
    root_chord=WING_ROOT_CHORD,
    root_section=SECTION,
    tip_chord=WING_TIP_CHORD,
    tip_section=SECTION,
    length=SEMI_WING_LENGTH,
    leading_edge_sweep_angle_deg=WING_SWEEP_ANGLE,
    dihedral_angle_deg=WING_DIHEDRAL_ANGLE,
    tip_torsion_angle_deg=WING_TIP_TORSION_ANGLE,
    control_surface_hinge_position=None,
)

left_aileron_surface = geo.objects.Surface(
    identifier="left_aileron",
    root_chord=AILERON_ROOT_CHORD,
    root_section=SECTION,
    tip_chord=AILERON_TIP_CHORD,
    tip_section=SECTION,
    length=AILERON_LENGTH,
    leading_edge_sweep_angle_deg=AILERON_SWEEP_ANGLE,
    dihedral_angle_deg=AILERON_DIHEDRAL_ANGLE,
    tip_torsion_angle_deg=AILERON_TIP_TORSION_ANGLE,
    control_surface_hinge_position=AILERON_CONTROL_SURFACE_HINGE_POSITION,
)

right_aileron_surface = geo.objects.Surface(
    identifier="right_aileron",
    root_chord=AILERON_ROOT_CHORD,
    root_section=SECTION,
    tip_chord=AILERON_TIP_CHORD,
    tip_section=SECTION,
    length=AILERON_LENGTH,
    leading_edge_sweep_angle_deg=AILERON_SWEEP_ANGLE,
    dihedral_angle_deg=AILERON_DIHEDRAL_ANGLE,
    tip_torsion_angle_deg=AILERON_TIP_TORSION_ANGLE,
    control_surface_hinge_position=AILERON_CONTROL_SURFACE_HINGE_POSITION,
)

# Creation of the surface objects of the tail macrosurface
left_elevator_surface = geo.objects.Surface(
    identifier="left_elevator",
    root_chord=ELEVATOR_ROOT_CHORD,
    root_section=SECTION,
    tip_chord=ELEVATOR_TIP_CHORD,
    tip_section=SECTION,
    length=SEMI_ELEVATOR_LENGTH,
    leading_edge_sweep_angle_deg=ELEVATOR_SWEEP_ANGLE,
    dihedral_angle_deg=ELEVATOR_DIHEDRAL_ANGLE,
    tip_torsion_angle_deg=ELEVATOR_TIP_TORSION_ANGLE,
    control_surface_hinge_position=ELEVATOR_CONTROL_SURFACE_HINGE_POSITION,
)

right_elevator_surface = geo.objects.Surface(
    identifier="right_elevator",
    root_chord=ELEVATOR_ROOT_CHORD,
    root_section=SECTION,
    tip_chord=ELEVATOR_TIP_CHORD,
    tip_section=SECTION,
    length=SEMI_ELEVATOR_LENGTH,
    leading_edge_sweep_angle_deg=ELEVATOR_SWEEP_ANGLE,
    dihedral_angle_deg=ELEVATOR_DIHEDRAL_ANGLE,
    tip_torsion_angle_deg=ELEVATOR_TIP_TORSION_ANGLE,
    control_surface_hinge_position=ELEVATOR_CONTROL_SURFACE_HINGE_POSITION,
)

# Creation of the wing macrosurface
wing = geo.objects.MacroSurface(
    position=np.array([0, 0, 0]),
    incidence=WING_INCIDENCE,
    surface_list=[
        left_aileron_surface,
        left_wing_surface,
        right_wing_surface,
        right_aileron_surface,
    ],
    symmetry_plane="XZ",
    torsion_center=0.5,
)

# Creation of the tail macrosurface
tail = geo.objects.MacroSurface(
    position=np.array([10.75, 0, 0]),
    incidence=WING_INCIDENCE,
    surface_list=[
        left_elevator_surface,
        right_elevator_surface,
    ],
    symmetry_plane="XZ",
    torsion_center=0.5,
)

aircraft_macrosurfaces = [wing, tail]

# --------------------------------------------------------------------------------------------------
# FUSELAGE AND TAIL BOOM DEFINITION

POINT_1 = np.array([0.5, 0.0, 0.0])
POINT_2 = np.array([0.93, 0.0, 0.0])
POINT_3 = np.array([11.0, 0.0, 0.0])

beam_property = struct.objects.ElementProperty(section=SECTION, material=MATERIAL)

fuselage = geo.objects.Beam(
    identifier="fuselage",
    root_point=POINT_1,
    tip_point=POINT_2,
    orientation_vector=np.array([0.0, 1.0, 0.0]),
    ElementProperty=beam_property,
)

tail_boom = geo.objects.Beam(
    identifier="tail_boom",
    root_point=POINT_2,
    tip_point=POINT_3,
    orientation_vector=np.array([0.0, 1.0, 0.0]),
    ElementProperty=beam_property,
)

aircraft_beams = [fuselage, tail_boom]

# --------------------------------------------------------------------------------------------------
# AIRCRAFT CG DEFINITION

AIRCRAFT_MASS = 4000
CG_POSITION = np.array([3, 0, 0])
IXX = 1
IYY = 1
IZZ = 1
IXY = 1
IXZ = 1
IYZ = 1

aircraft_cg = geo.objects.MaterialPoint(
    identifier="aircraft_cg",
    orientation_quaternion=Quaternion(),
    mass=AIRCRAFT_MASS,
    position=CG_POSITION,
    Ixx=IXX,
    Iyy=IYY,
    Izz=IZZ,
    Ixy=IXY,
    Ixz=IXZ,
    Iyz=IYZ,
)

# --------------------------------------------------------------------------------------------------
# AIRCRAFT STRUCTURE CONNECTIONS

wing_to_fuselage = struct.objects.Connection(
    left_wing_surface, "ROOT", fuselage, "ROOT"
)

fuselage_to_cg = struct.objects.Connection(fuselage, "TIP", aircraft_cg, "ROOT")

fuselage_to_tail_boom = struct.objects.Connection(fuselage, "TIP", tail_boom, "ROOT")

tail_boom_to_tail = struct.objects.Connection(
    tail_boom, "TIP", left_elevator_surface, "ROOT"
)

aircraft_struct_connections = [
    wing_to_fuselage,
    fuselage_to_tail_boom,
    tail_boom_to_tail,
]

# --------------------------------------------------------------------------------------------------

# Aircraft definition

AIRCRAFT_NAME = "hale aircraft"
AIRCRAFT_MACROSURFACES = aircraft_macrosurfaces
AIRCRAFT_BEAMS = aircraft_beams
AIRCRAFT_INERTIAL_PROPERTIES = aircraft_cg
AIRCRAFT_STRUCT_CONNECTIONS = aircraft_struct_connections

hale_aircraft = geo.objects.Aircraft(
    name=AIRCRAFT_NAME,
    macrosurfaces=AIRCRAFT_MACROSURFACES,
    beams=AIRCRAFT_BEAMS,
    inertial_properties=AIRCRAFT_INERTIAL_PROPERTIES,
    connections=AIRCRAFT_STRUCT_CONNECTIONS,
    ref_area=wing.ref_area,
    mean_aero_chord=wing.mean_aero_chord
)
