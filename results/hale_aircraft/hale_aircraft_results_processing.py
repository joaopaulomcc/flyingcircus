"""
====================================================================================================
CFD-Based Analysis of Nonlinear Aeroelastic Behavior of High-Aspect Ratio Wings

M. J. Smith, M. J. Patil, D. H. Hodges

Georgia Institute fo Technology, Atlanta

====================================================================================================

Comparisson of the results obtained by in the paper above with those generated by the tool developed
in this work

Author: João Paulo Monteiro Cruvinel da Costa
"""

# ==================================================================================================
# IMPORTS

# Import python scientific libraries
import matplotlib.pyplot as plt
import numpy as np
import scipy as sc
import sys
import pickle

# Import code sub packages
from context import src
from src import aerodynamics as aero
from src import aeroelasticity as aelast
from src import control
from src import flight_mechanics as flmec
from src import geometry as geo
from src import loads
from src import structures as struct
from src import visualization as vis


from hale_aircraft_data import hale_aircraft

f = open("results\\hale_aircraft\\hale_aircraft_sim.pckl", "rb")
rig_results, flex_results, flex_iteration_results = pickle.load(f)
f.close()

# Draw Aircraft
aircraft_ax, aircraft_fig = vis.plot_3D2.generate_aircraft_plot(
    hale_aircraft, title="Aeronave Hale",
)

#plt.show()

# ==================================================================================================
# PROCESSING RESULTS

# CASE 001:
#   - Alpha: 2º
#   - Speed: 25 m/s
#   - Altitude: 20000 m
#   - Flexible

# Generate Original vs Deformed Grid Plot

# Draw original grids
grids_ax, grids_fig = vis.plot_3D2.generate_aircraft_grids_plot(
    flex_results[0]["aircraft_original_grids"]["macrosurfaces_aero_grids"],
    flex_results[0]["aircraft_struct_fem_elements"],
    title="Aeronave HALE Malhas Original e Deformadas",
    ax=None,
    show_origin=True,
    show_nodes=False,
    line_color="tab:blue",
    alpha=0.5,
)


# Draw deformed Grids
grids_ax, grids_fig = vis.plot_3D2.generate_deformed_aircraft_grids_plot(
    flex_results[0]["aircraft_deformed_macrosurfaces_aero_grids"],
    flex_results[0]["aircraft_struct_fem_elements"],
    flex_results[0]["aircraft_struct_deformations"],
    ax=grids_ax,
    fig=grids_fig,
    show_origin=True,
    show_nodes=False,
    line_color="tab:orange",
    alpha=1,
)

grids_ax, grids_fig = vis.plot_3D2.generate_deformed_aircraft_grids_plot(
    flex_results[1]["aircraft_deformed_macrosurfaces_aero_grids"],
    flex_results[1]["aircraft_struct_fem_elements"],
    flex_results[1]["aircraft_struct_deformations"],
    ax=grids_ax,
    fig=grids_fig,
    show_origin=True,
    show_nodes=False,
    line_color="tab:green",
    alpha=1,
)

grids_ax, grids_fig = vis.plot_3D2.generate_deformed_aircraft_grids_plot(
    flex_results[2]["aircraft_deformed_macrosurfaces_aero_grids"],
    flex_results[2]["aircraft_struct_fem_elements"],
    flex_results[2]["aircraft_struct_deformations"],
    ax=grids_ax,
    fig=grids_fig,
    show_origin=True,
    show_nodes=False,
    line_color="tab:red",
    alpha=1,
)

grids_ax, grids_fig = vis.plot_3D2.generate_deformed_aircraft_grids_plot(
    flex_results[3]["aircraft_deformed_macrosurfaces_aero_grids"],
    flex_results[3]["aircraft_struct_fem_elements"],
    flex_results[3]["aircraft_struct_deformations"],
    ax=grids_ax,
    fig=grids_fig,
    show_origin=True,
    show_nodes=False,
    line_color="tab:purple",
    alpha=1,
)

grids_ax, grids_fig = vis.plot_3D2.generate_deformed_aircraft_grids_plot(
    flex_results[4]["aircraft_deformed_macrosurfaces_aero_grids"],
    flex_results[4]["aircraft_struct_fem_elements"],
    flex_results[4]["aircraft_struct_deformations"],
    ax=grids_ax,
    fig=grids_fig,
    show_origin=True,
    show_nodes=False,
    line_color="brown",
    alpha=1,
)

#plt.show()

# Calculate Loads on each of the aerodynamic panels
aircraft_panel_loads = loads.functions.calculate_aircraft_panel_loads(
    flex_results[1]["original_aircraft_panel_grid"], flex_results[1]["aircraft_force_grid"]
)

results_ax, results_fig = vis.plot_3D2.generate_results_plot(
    aircraft_deformed_macrosurfaces_aero_grids=flex_results[1]["aircraft_deformed_macrosurfaces_aero_grids"],
    aircraft_panel_loads=aircraft_panel_loads,
    aircraft_struct_fem_elements=flex_results[1]["aircraft_struct_fem_elements"],
    aircraft_struct_deformations=flex_results[1]["aircraft_struct_deformations"],
    results_string="delta_p_grid",
    title="Aeronave HALE Delta de Pressão - Alfa 2º",
    colorbar_label="Delta de Pressão [Pa]",
    ax=None,
    fig=None,
    show_origin=True,
    colormap="coolwarm",
)

#plt.show()

# Deformation plot
fig1, ax1 = plt.subplots()
fig2, ax2 = plt.subplots()

for i in range(0,5):

    deformation_table = aelast.functions.calculate_deformation_table(
        flex_results[i]["aircraft_original_grids"],
        flex_results[i]["aircraft_struct_deformations"],
    )

    # sort nodes by desired column, in this case the Y coordinate

    nodes = deformation_table["aircraft_macrosurfaces_deformed_nodes"][0]
    nodes = nodes[nodes[:, 1].argsort()]

    ax1.plot(nodes[:, 1], nodes[:, 2], label=f"Alfa {i+1}º")
    ax2.plot(nodes[:, 1], np.degrees(nodes[:, 4]), label=f"Alfa {i+1}º")

# Plot Bending


ax1.grid()
ax1.set_title("Aeronave HALE Flexão da Asa")
ax1.set_ylabel("Flexão [m]")
ax1.set_xlabel("Semi-envergadura [m]")
ax1.legend()

# Plot Torsion


ax2.grid()
ax2.set_title("Aeronave HALE Torção da Asa")
ax2.set_ylabel("Torção [graus]")
ax2.set_xlabel("Semi-envergadura [m]")
ax2.legend()

# Deformation plot
fig1, ax1 = plt.subplots()
fig2, ax2 = plt.subplots()

for i in range(0,5):

    deformation_table = aelast.functions.calculate_deformation_table(
        flex_results[i]["aircraft_original_grids"],
        flex_results[i]["aircraft_struct_deformations"],
    )

    # sort nodes by desired column, in this case the Y coordinate

    nodes = deformation_table["aircraft_macrosurfaces_deformed_nodes"][1]
    nodes = nodes[nodes[:, 1].argsort()]

    ax1.plot(nodes[:, 1], nodes[:, 2], label=f"Alfa {i+1}º")
    ax2.plot(nodes[:, 1], np.degrees(nodes[:, 4]), label=f"Alfa {i+1}º")

# Plot Bending


ax1.grid()
ax1.set_title("Aeronave HALE Flexão da Empenagem Horizontal")
ax1.set_ylabel("Flexão [m]")
ax1.set_xlabel("Semi-envergadura [m]")
ax1.legend()

# Plot Torsion


ax2.grid()
ax2.set_title("Aeronave HALE Torção da Empenagem Horizontal")
ax2.set_ylabel("Torção [graus]")
ax2.set_xlabel("Semi-envergadura [m]")
ax2.legend()

#plt.show()

interest_point = hale_aircraft.inertial_properties.position

## Aerodynamic forces in the aircraft coordinate system
#total_cg_aero_force, total_cg_aero_moment, component_cg_aero_loads = loads.functions.calc_aero_loads_at_point(
#    interest_point,
#    results["aircraft_force_grid"],
#    results["aircraft_deformed_macrosurfaces_aero_panels"],
#)
#
#print()
#print("#######################################")
#print("#        HALE AIRCRAFT RESULTS        #")
#print("#######################################")
#print()
#print(f"# Total loads at aircraft CG:")
#print(f"    FX: {total_cg_aero_force[0]} N")
#print(f"    FY: {total_cg_aero_force[1]} N")
#print(f"    FZ: {total_cg_aero_force[2]} N")
#print(f"    RX: {total_cg_aero_moment[0]} N")
#print(f"    RY: {total_cg_aero_moment[1]} N")
#print(f"    RZ: {total_cg_aero_moment[2]} N")

V_X = 25
V_Y = 0
V_Z = 0

# Rotation velocities
R_X = 0
R_Y = 0
R_Z = 0

# Aircraft Attitude in relation to the wind axis, in degrees
ALPHA = 2  # Pitch angle
BETA = 0  # Yaw angle
GAMMA = 0  # Roll angle

# Center of rotation, usually the aircraft CG position
CENTER_OF_ROTATION = hale_aircraft.inertial_properties.position

# Flight altitude, used to calculate atmosppheric conditions, in meters
ALTITUDE = 20000

flex_cls = [0]
flex_cms = [0]
flex_cds = [0]
rig_cls = [0]
rig_cms = [0]
rig_cds = [0]

for i in range(0, 5):

    ALPHA = i + 1

    forces, moments, coefficients = loads.functions.calc_lift_drag(
        aircraft=hale_aircraft,
        point=interest_point,
        speed=V_X,
        altitude=ALTITUDE,
        attitude_vector=np.array([ALPHA, BETA, GAMMA]),
        aircraft_force_grid=flex_results[i]["aircraft_force_grid"],
        aircraft_panel_grid=flex_results[i]["aircraft_deformed_macrosurfaces_aero_panels"],
    )
    flex_cls.append(coefficients['Cl'])
    flex_cms.append(coefficients['Cm'])
    flex_cds.append(coefficients['Cd'])

    forces, moments, coefficients = loads.functions.calc_lift_drag(
        aircraft=hale_aircraft,
        point=interest_point,
        speed=V_X,
        altitude=ALTITUDE,
        attitude_vector=np.array([ALPHA, BETA, GAMMA]),
        aircraft_force_grid=rig_results[i]["aircraft_force_grid"],
        aircraft_panel_grid=rig_results[i]["aircraft_macrosurfaces_panels"],
    )
    rig_cls.append(coefficients['Cl'])
    rig_cms.append(coefficients['Cm'])
    rig_cds.append(coefficients['Cd'])


fig, ax = plt.subplots()
ax.plot(np.arange(0, 6), flex_cls, label="Flexível")
ax.plot(np.arange(0, 6), rig_cls, label="Rígido")
ax.set_xlabel("Ângulo de Ataque [Graus]")
ax.set_ylabel("$C_l$")
ax.set_title("Aeronave HALE $C_l$ vs $\\alpha$")
ax.grid()
ax.legend()

fig, ax = plt.subplots()
ax.plot(np.arange(0, 6), flex_cms, label="Flexível")
ax.plot(np.arange(0, 6), rig_cms, label="Rígido")
ax.set_xlabel("Ângulo de Ataque [Graus]")
ax.set_ylabel("$C_m$")
ax.set_title("Aeronave HALE $C_m$ vs $\\alpha$")
ax.grid()
ax.legend()

fig, ax = plt.subplots()
ax.plot(np.arange(0, 6), flex_cds, label="Flexível")
ax.plot(np.arange(0, 6), rig_cds, label="Rígido")
ax.set_xlabel("Ângulo de Ataque [Graus]")
ax.set_ylabel("$C_d$")
ax.set_title("Aeronave HALE $C_d$ vs $\\alpha$")
ax.grid()
ax.legend()

#plt.show()

print()
print("# Aerodynamic Coeffients:")
print(f"    - Lift: {forces['lift']} N")
print(f"    - Cl: {coefficients['Cl']}")
print(f"    - Drag: {forces['drag']} N")
print(f"    - Cd: {coefficients['Cd']}")
print(f"    - Pitch Moment: {moments['pitch_moment']} N.m")
print(f"    - Cm: {coefficients['Cm']}")

# Create load distribution plots

flex_comp = []
rig_comp = []

for i in range(0, 5):

    ALPHA = i + 1

    components_loads = loads.functions.calc_load_distribution(
        aircraft_force_grid=flex_results[i]["aircraft_force_grid"],
        aircraft_panel_grid=flex_results[i]["original_aircraft_panel_grid"],
        aircraft_gamma_grid=flex_results[i]["aircraft_gamma_grid"],
        attitude_vector=np.array([ALPHA, BETA, GAMMA]),
        altitude=ALTITUDE,
        speed=V_X,
    )

    flex_comp.append(components_loads)

    components_loads = loads.functions.calc_load_distribution(
        aircraft_force_grid=rig_results[i]["aircraft_force_grid"],
        aircraft_panel_grid=rig_results[i]["aircraft_macrosurfaces_panels"],
        aircraft_gamma_grid=rig_results[i]["aircraft_gamma_grid"],
        attitude_vector=np.array([ALPHA, BETA, GAMMA]),
        altitude=ALTITUDE,
        speed=V_X,
    )

    rig_comp.append(components_loads)

fig1, ax1 = plt.subplots()
ax1.set_title(f"Aeronave HALE - ASA - Distribuição de Sustentação")
ax1.set_xlabel("Envergadura [m]")
ax1.set_ylabel("Sustentação [N]")
ax1.grid()

fig2, ax2 = plt.subplots()
ax2.set_title(f"Aeronave HALE - Empenagem Horizontal - Distribuição de Sustentação")
ax2.set_xlabel("Envergadura [m]")
ax2.set_ylabel("Sustentação [N]")
ax2.grid()

fig3, ax3 = plt.subplots()
ax3.set_title(f"Aeronave HALE - Empenagem Vertical - Distribuição de Sustentação")
ax3.set_xlabel("Envergadura [m]")
ax3.set_ylabel("Sustentação [N]")
ax3.grid()

color_pallet = [
        "tab:blue",
        "tab:orange",
        "tab:green",
        "tab:red",
        "tab:purple",
        "tab:brow",
        "tab:pink",
        "tab:gray",
        "tab:olive",
        "tab:cyan",
]

for i in range(0, 5):

    flex_component = flex_comp[i]
    rig_component = rig_comp[i]

    ax1.plot(flex_component[0]["y_values"], flex_component[0]["lift"], label=f"Flex - $\\alpha$ = {i+1}º", color=color_pallet[i])
    ax1.plot(rig_component[0]["y_values"], rig_component[0]["lift"], label=f"Rig - $\\alpha$ = {i+1}º", linestyle="--", color=color_pallet[i])

    ax2.plot(flex_component[1]["y_values"], flex_component[1]["lift"], label=f"Flex - $\\alpha$ = {i+1}º", color=color_pallet[i])
    ax2.plot(rig_component[1]["y_values"], rig_component[1]["lift"], label=f"Rig - $\\alpha$ = {i+1}º", linestyle="--", color=color_pallet[i])

    ax3.plot(flex_component[2]["y_values"], flex_component[2]["lift"], label=f"Flex - $\\alpha$ = {i+1}º", color=color_pallet[i])
    ax3.plot(rig_component[2]["y_values"], rig_component[2]["lift"], label=f"Rig - $\\alpha$ = {i+1}º", linestyle="--", color=color_pallet[i])

ax1.legend()
ax2.legend()
ax3.legend()

plt.show()

input()