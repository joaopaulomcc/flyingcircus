"""
====================================================================================================
CFD-Based Analysis of Nonlinear Aeroelastic Behavior of High-Aspect Ratio Wings

M. J. Smith, M. J. Patil, D. H. Hodges

Georgia Institute fo Technology, Atlanta

====================================================================================================

Comparisson of the results obtained by in the paper above with those generated by the tool developed
in this work

Author: João Paulo Monteiro Cruvinel da Costa
"""

# ==================================================================================================
# IMPORTS

# Import python scientific libraries
import matplotlib.pyplot as plt
import numpy as np
import scipy as sc
import sys

# Import code sub packages
from context import src
from src import aerodynamics as aero
from src import aeroelasticity as aelast
from src import control
from src import flight_mechanics as flmec
from src import geometry as geo
from src import loads
from src import structures as struct
from src import visualization as vis

# ==================================================================================================
print()
print("============================================================")
print("= VALIDATION OF AEROELASTIC CALCULATION                    =")
print("= VALIDATION CASE: CFD-Based Analysis of Nonlinear         =")
print("= Aeroelastic Behavior of High-Aspect Ratio Wings          =")
print("= AUTHORS: M. J. Smith, M. J. Patil, D. H. Hodges          =")
print("============================================================")
# ==================================================================================================
# EXECUTE CALCULATION

from hale_aircraft_data import hale_aircraft

# from hale_aircraft_simulation import results, iteration_results, hale_aircraft_grids

import pickle

# f = open('results.pckl', 'wb')
# pickle.dump([results, iteration_results, hale_aircraft_grids], f)
# f.close()

f = open("results.pckl", "rb")
results, iteration_results, hale_aircraft_grids = pickle.load(f)
f.close()

# ==================================================================================================
# PROCESSING RESULTS

#        final_results = {
#            "aircraft_deformed_macrosurfaces_aero_grids": aircraft_deformed_macrosurfaces_aero_grids,
#            "aircraft_deformed_macrosurfaces_aero_panels": aircraft_deformed_macrosurfaces_aero_panels,
#            "aircraft_gamma_grid": aircraft_gamma_grid,
#            "aircraft_force_grid": aircraft_force_grid,
#            "aircraft_struct_deformations": deformations,
#            "aircraft_struct_internal_loads": internal_loads,
#            "deformation_at_control_node": old_deformation,
#            "influence_coef_matrix": influence_coef_matrix,
#            "aircraft_original_grids": aircraft_grids,
#            "aircraft_struct_fem_elements": aircraft_fem_elements,
#            "original_aircraft_panel_grid": original_aircraft_panel_grid,
#        }

print()
print(f"# Deformation at control node:")
print(f"    X : {results['deformation_at_control_node'][0]}")
print(f"    Y : {results['deformation_at_control_node'][1]}")
print(f"    Z : {results['deformation_at_control_node'][2]}")
print(f"    RX: {np.degrees(results['deformation_at_control_node'][3])}")
print(f"    RY: {np.degrees(results['deformation_at_control_node'][4])}")
print(f"    RZ: {np.degrees(results['deformation_at_control_node'][5])}")


ax, fig = vis.plot_3D2.generate_aircraft_grids_plot(
    results["aircraft_original_grids"]["macrosurfaces_aero_grids"],
    results["aircraft_struct_fem_elements"],
    title=None,
    ax=None,
    show_origin=True,
    show_nodes=False,
    line_color="k",
    alpha=0.5,
)


ax, fig = vis.plot_3D2.generate_deformed_aircraft_grids_plot(
    results["aircraft_deformed_macrosurfaces_aero_grids"],
    results["aircraft_struct_fem_elements"],
    results["aircraft_struct_deformations"],
    title="Grids, V = 25 [m/s], Alpha = 2º",
    ax=ax,
    fig=fig,
    show_origin=True,
    show_nodes=False,
    line_color="r",
    alpha=1,
)

#fig.set_size_inches(12, 10)

# for i in np.linspace(0,360,300):
#    ax.elev = 15
#    ax.azim = i
#    ax.dist = 6
#    plt.savefig(f"results\\hale\\deflected_grids_v_25_alfa_2_{i}_degrees.png", dpi=100)

components_delta_p_grids = []
components_force_mag_grids = []

aircraft_panel_loads = loads.functions.calculate_aircraft_panel_loads(
    results["original_aircraft_panel_grid"], results["aircraft_force_grid"]
)

ax, fig = vis.plot_3D2.plot_results(
    results["aircraft_deformed_macrosurfaces_aero_grids"],
    results["aircraft_struct_fem_elements"],
    results["aircraft_struct_deformations"],
    aircraft_panel_loads,
    results_string="delta_p_grid",
    title="Delta P, V = 25 [m/s], Alpha = 2º",
    colorbar_label="Delta Pressure [Pa]",
    ax=None,
    fig=None,
    show_origin=True,
    colormap="coolwarm",
)

#fig.set_size_inches(12, 10)

# for i in np.linspace(0,360,300):
#    ax.elev = 15
#    ax.azim = i
#    ax.dist = 6
#    plt.savefig(f"results\\hale\\deflected_delta_p_v_25_alfa_2_{i}_degrees.png", dpi=100)

interest_point = hale_aircraft.inertial_properties.position

# Aerodynamic forces in the aircraft coordinate system
total_cg_aero_force, total_cg_aero_moment, component_cg_aero_loads = loads.functions.calc_aero_loads_at_point(
    interest_point,
    results["aircraft_force_grid"],
    results["aircraft_deformed_macrosurfaces_aero_panels"],
)

print()
print(f"# Total loads at aircraft CG:")
print(f"    FX: {total_cg_aero_force[0]} N")
print(f"    FY: {total_cg_aero_force[1]} N")
print(f"    FZ: {total_cg_aero_force[2]} N")
print(f"    RX: {total_cg_aero_moment[0]} N")
print(f"    RY: {total_cg_aero_moment[1]} N")
print(f"    RZ: {total_cg_aero_moment[2]} N")

V_X = 25
V_Y = 0
V_Z = 0

# Rotation velocities
R_X = 0
R_Y = 0
R_Z = 0

# Aircraft Attitude in relation to the wind axis, in degrees
ALPHA = 2  # Pitch angle
BETA = 0  # Yaw angle
GAMMA = 0  # Roll angle

# Center of rotation, usually the aircraft CG position
CENTER_OF_ROTATION = hale_aircraft.inertial_properties.position

# Flight altitude, used to calculate atmosppheric conditions, in meters
ALTITUDE = 20000

forces, moments, coefficients = loads.functions.calc_lift_drag(
    hale_aircraft,
    interest_point,
    25,
    20000,
    np.array([5, 0, 0]),
    results["aircraft_force_grid"],
    results["aircraft_deformed_macrosurfaces_aero_panels"],
)

print()
print("# Aerodynamic Coeffients:")
print(f"    - Lift: {forces['lift']} N")
print(f"    - Cl: {coefficients['Cl']} N")
print(f"    - Drag: {forces['drag']} N")
print(f"    - Cd: {coefficients['Cd']} N")

# Create load distribution plots
components_loads = loads.functions.calc_load_distribution(
    results["aircraft_force_grid"],
    results["original_aircraft_panel_grid"],
    attitude_vector=np.array([5, 0, 0]),
    altitude=20000,
    speed=25,
)

for component in components_loads:
    fig = plt.figure()
    ax1 = fig.add_subplot(3, 1, 1)
    ax1.set_title("Lift Distribution")
    ax1.set_xlabel("Spam Position [m]")
    ax1.set_ylabel("Lift [N]")
    ax1.plot(component["y_values"], component["lift"])

    ax2 = fig.add_subplot(3, 1, 2)
    ax2.set_title("Cl Distribution")
    ax2.set_xlabel("Spam Position [m]")
    ax2.set_ylabel("Cl")
    ax2.plot(component["y_values"], component["Cl"])
    plt.tight_layout()

    ax3 = fig.add_subplot(3, 1, 3)
    ax3.set_title("Drag Distribution")
    ax3.set_xlabel("Spam Position [m]")
    ax3.set_ylabel("Drag [N]")
    ax3.plot(component["y_values"], component["drag"])
    plt.tight_layout()

# Write Results to file
report_file = open("results/hale_aircraft_report.txt", "w")
report_file.write("============================================================\n")
report_file.write("= VALIDATION OF AEROELASTIC CALCULATION                    =\n")
report_file.write("= VALIDATION CASE: CFD-Based Analysis of Nonlinear         =\n")
report_file.write("= Aeroelastic Behavior of High-Aspect Ratio Wings          =\n")
report_file.write("= AUTHORS: M. J. Smith, M. J. Patil, D. H. Hodges          =\n")
report_file.write("============================================================\n")
report_file.write("\n")
report_file.write("CASE 1:\n")
report_file.write("# Aerodynamic loads in the aircraft coordinate system:\n")
report_file.write(f"- X force: {total_cg_aero_force[0]} [N]\n")
report_file.write(f"- Y force: {total_cg_aero_force[1]} [N]\n")
report_file.write(f"- Z force: {total_cg_aero_force[2]} [N]\n")
report_file.write(f"- X moment: {total_cg_aero_moment[0]} [N.m]\n")
report_file.write(f"- Y moment: {total_cg_aero_moment[1]} [N.m]\n")
report_file.write(f"- Z moment: {total_cg_aero_moment[2]} [N.m]\n")
report_file.write("\n")
report_file.write("# Aerodynamic loads in the wind coordinate system:\n")
report_file.write(f"- Lift: {forces['lift']} [N]\n")
report_file.write(f"- Drag: {forces['drag']} [N]\n")
report_file.write(f"- Sideforce: {forces['sideforce']} [N]\n")
report_file.write(f"- Roll moment: {moments['roll_moment']} [N.m]\n")
report_file.write(f"- Pitch moment: {moments['pitch_moment']} [N.m]\n")
report_file.write(f"- Yaw moment: {moments['yaw_moment']} [N.m]\n")
report_file.write("\n")
report_file.write("# Aerodynamic Coefficients:\n")
report_file.write(f"- Cl : {coefficients['Cl']}\n")
report_file.write(f"- Cd : {coefficients['Cd']}\n")
report_file.write(f"- Cm : {coefficients['Cm']}\n")
report_file.write("\n")
report_file.close()

plt.show()
